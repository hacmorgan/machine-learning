#!/usr/bin/env python

import time
import tkinter
import cv2
import PIL.Image, PIL.ImageTk
import argparse
import sys
import signal
import numpy as np


img_width = 64
img_height = 48


def get_args():
    global args
    parser = argparse.ArgumentParser(description='labelling tool using Tkinter')
    parser.add_argument('--input-file', '-i', type=str, required=True, help='file containing the images and default 0 classifications')
    parser.add_argument('--output-file', '-o', type=str, required=False, help='file to write to with updated annotations (will save to input file if not given)')
    args = parser.parse_args()


def get_data():
    global args
    global num_records
    with open(args.input_file, "rb") as infile:
        records = np.frombuffer(infile.read(), dtype=np.uint8)
    num_records = int(np.shape(records)[0] / (img_width*img_height+1))
    return records.reshape((num_records, img_width*img_height+1))


def create_gui():
    # Create the window
    global window
    window = tkinter.Tk()

    # Create the canvases for showing all the images
    global canvases
    canvases = []
    canvases.append(tkinter.Canvas(window, width=img_width*6, height=img_height*6))
    for i in range(9):
        canvases.append(tkinter.Canvas(window, width=img_width*2, height=img_height*2))

    # Bind key presses to the button functions
    canvases[0].bind("n", next_image_callback)
    canvases[0].bind("p", previous_image_callback)
    canvases[0].bind("k", skip_num_images_callback)
    canvases[0].bind("0", classify_0_callback)
    canvases[0].bind("1", classify_1_callback)
    canvases[0].bind("s", save_callback)
    canvases[0].bind("d", delete_callback)
    canvases[0].bind("<Escape>", exit_callback)
    canvases[0].bind("<Enter>", mouse_callback)

    # Create the buttons
    next_image = tkinter.Button(window, text="next image [n]", command=next_image_callback, bg='deep pink')
    previous_image = tkinter.Button(window, text="previous image [p]", command=previous_image_callback, bg='deep sky blue')
    global num_images
    num_images = tkinter.Entry(window)
    skip_num_images = tkinter.Button(window, text="skip ^ images [k]", command=skip_num_images_callback)
    classify_0 = tkinter.Button(window, text="classify 0 (not at end of record) [0]", command=classify_0_callback, bg='lawn green')
    classify_1 = tkinter.Button(window, text="classify 1 (at end of record) [1]", command=classify_1_callback, bg='red')
    global percentage_true
    percentage_true = tkinter.Text(window, bg='black', fg='SteelBlue1', height=1, width=6)
    delete_example = tkinter.Button(window, text="delete this image [d]", command=delete_callback, bg='dark orange')
    save = tkinter.Button(window, text="save annotations [s]", command=save_callback, bg='cyan2')
    exit_ = tkinter.Button(window, text="exit (without saving) [esc]", command=exit_callback, bg='gray25')

    # Define the layout
    canvases[0].grid(row=0, column=0, rowspan=3, columnspan=3)
    for i in range(1,10):
        canvases[i].grid(row=int((i-1)/3), column=(i-1)%3+3)
    next_image.grid(row=3, column=0)
    previous_image.grid(row=4, column=0)
    num_images.grid(row=3, column=1)
    skip_num_images.grid(row=4, column=1)
    classify_0.grid(row=3, column=2)
    classify_1.grid(row=4, column=2)
    percentage_true.grid(row=3, column=3)
    delete_example.grid(row=4, column=3)
    save.grid(row=3, column=4)
    exit_.grid(row=4, column=4)
    percentage_true.insert("1.0", calc_percentage_correct())


def draw_images():
    global master_index
    global canvases
    global images
    global examples
    examples = []
    for i in range(master_index, master_index + 10):
        image = images[i,:].reshape((img_height, img_width))
        if i == master_index:
            multiplier = 6
        else:
            multiplier = 2
        image = cv2.resize(image, None, fx=multiplier, fy=multiplier)
        image = annotate(image, i) # overlay index and classification
        examples.append(PIL.ImageTk.PhotoImage(image = PIL.Image.fromarray(image)))
        canvases[i-master_index].create_image(0, 0, image=examples[i-master_index], anchor=tkinter.NW)
    return


def annotate(image, index):
    global labels
    # Draw index
    cv2.putText(
        img = image,
        text = str(index),
        org = (10,15),
        fontFace = cv2.FONT_HERSHEY_PLAIN,
        fontScale = 1,
        color = (0,0,1),
        lineType=cv2.LINE_AA, # anti-aliasing niceness
        thickness = 1
    )
    # draw annotation
    cv2.putText(
        img = image,
        text = str(labels[index]),
        org = (image.shape[1] - 20, 15),
        fontFace = cv2.FONT_HERSHEY_PLAIN,
        fontScale = 1,
        color = (0,0,1),
        lineType=cv2.LINE_AA,
        thickness = 1
    )
    return image


def update_percentage_true():
    global master_index
    global percentage_true
    percentage_true.delete("1.0", "1.6")
    percentage_true.insert("1.0", calc_percentage_correct())

    
def calc_percentage_correct():
    global labels
    return str(round(np.mean(labels)*100, 2)) + "%"


############################
#    CALLBACK FUNCTIONS    #
############################
def next_image_callback(event=None):
    global master_index
    global num_records
    if master_index < num_records-1:
        master_index+=1
    draw_images()
    
def previous_image_callback(event=None):
    global master_index
    if master_index > 0:
        master_index-=1
    draw_images()

def skip_num_images_callback(event=None):
    global master_index
    global num_images
    global num_records
    num_to_skip = int(num_images.get())
    if master_index + num_to_skip >= num_records - 1:
        num_to_skip = num_records - 1
    master_index += num_to_skip
    draw_images()
    
def classify_0_callback(event=None):
    global master_index
    global labels
    labels[master_index] = 0
    next_image_callback()
    update_percentage_true()
    
def classify_1_callback(event=None):
    global master_index
    global labels
    labels[master_index] = 1
    next_image_callback()
    update_percentage_true()

def delete_callback(event=None):
    global images
    global labels
    global master_index
    global percentage_true
    global num_records
    images = np.delete(images, master_index, 0)
    labels = np.delete(labels, master_index, 0)
    update_percentage_true()
    num_records -= 1
    draw_images()
    # next_image_callback()

def save_callback(event=None):
    global images
    global labels
    global args
    full_data = np.concatenate((images, labels.reshape((labels.size,1))), axis=1)
    if args.output_file is None:
        args.output_file = args.input_file
    with open(args.output_file, "wb") as outfile:
        outfile.write(full_data.tobytes())
    print("Data saved!")
    return

def exit_callback(event=None):
    sys.exit(1)

def mouse_callback(event=None):
    global canvases
    canvases[0].focus_set()
    

def main(args):
    # initialise globals
    global images
    global labels
    global window
    global canvases
    global master_index
    
    data = get_data()
    images = data[:,:-1].copy()
    labels = data[:,-1].copy()
    labels.setflags(write=1) # make sure it's writable
    master_index = 0

    create_gui()
    draw_images()
    
    window.mainloop()
    

if __name__ == "__main__":
    sys.exit(main(get_args()))
    


